"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const st = require("stacktrace-js");
const logger_1 = require("./logger");
const get_caller_1 = require("./get-caller");
const console_1 = require("./console");
const terminal_1 = require("./terminal");
const utils_1 = require("./utils");
const loggers = {};
const logOutputters = {};
if (process && process.stdout && process.stdout.write) {
    logOutputters.StdoutOutputter = terminal_1.createTerminalOutputter((s) => process.stdout.write(s));
}
else {
    logOutputters.ConsoleOutputter = console_1.ConsoleOutputter;
}
if (process.env.LIGNUM_FILE && process.env.LIGNUM_FILE !== '') {
    const fs = eval("require('fs')");
    logOutputters.FileOutputter = terminal_1.createTerminalOutputter((s) => fs.appendFileSync(process.env.LIGNUM_FILE, s));
}
let lignumPath = path.dirname(require.resolve('../package.json'));
if (!path.isAbsolute(lignumPath)) {
    lignumPath = path.dirname(utils_1.normalizeTraces(st.getSync())[0].fileName);
}
exports.getLogger = (opts = { name: null, root: null }) => {
    const traces = utils_1.normalizeTraces(st.getSync());
    const callerRoot = get_caller_1.getCallerRoot(traces, lignumPath);
    const name = opts.name || callerRoot.name || 'app';
    const root = opts.root || callerRoot.root;
    if (root in loggers) {
        return loggers[root];
    }
    const outputters = Object.keys(logOutputters).map(key => {
        const outputter = logOutputters[key];
        const def = process.env[`LIGNUM_${key.replace('Outputter', '').toUpperCase()}`];
        return new outputter({ def });
    });
    loggers[root] = new logger_1.Logger(name, root, lignumPath, outputters);
    return loggers[root];
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2QkFBNEI7QUFFNUIsb0NBQW1DO0FBRW5DLHFDQUFpQztBQUNqQyw2Q0FBNEM7QUFDNUMsdUNBQTRDO0FBQzVDLHlDQUFvRDtBQUNwRCxtQ0FBeUM7QUFFekMsTUFBTSxPQUFPLEdBQWdDLEVBQUUsQ0FBQTtBQUMvQyxNQUFNLGFBQWEsR0FBUSxFQUFFLENBQUE7QUFFN0IsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRTtJQUNyRCxhQUFhLENBQUMsZUFBZSxHQUFHLGtDQUF1QixDQUFDLENBQUMsQ0FBUyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0NBQ2hHO0tBQU07SUFDTCxhQUFhLENBQUMsZ0JBQWdCLEdBQUcsMEJBQWdCLENBQUE7Q0FDbEQ7QUFFRCxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxLQUFLLEVBQUUsRUFBRTtJQUM3RCxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUE7SUFDaEMsYUFBYSxDQUFDLGFBQWEsR0FBRyxrQ0FBdUIsQ0FBQyxDQUFDLENBQVMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO0NBQ3BIO0FBRUQsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQTtBQUVqRSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBRTtJQUNoQyxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyx1QkFBZSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0NBQ3JFO0FBRVksUUFBQSxTQUFTLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFO0lBQzdELE1BQU0sTUFBTSxHQUFHLHVCQUFlLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUE7SUFDNUMsTUFBTSxVQUFVLEdBQUcsMEJBQWEsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUE7SUFDcEQsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxVQUFVLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQTtJQUNsRCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUE7SUFFekMsSUFBSSxJQUFJLElBQUksT0FBTyxFQUFFO1FBQ25CLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3JCO0lBRUQsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDdEQsTUFBTSxTQUFTLEdBQUcsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3BDLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxHQUFHLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUE7UUFFL0UsT0FBTyxJQUFJLFNBQVMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUE7SUFDL0IsQ0FBQyxDQUFDLENBQUE7SUFFRixPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxlQUFNLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUE7SUFDOUQsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDdEIsQ0FBQyxDQUFBIn0=