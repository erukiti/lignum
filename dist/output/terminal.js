"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../types");
const colors = {
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m',
    white: '\x1b[37m',
    bgRed: '\x1b[30;41m',
    bgGreen: '\x1b[30;42m',
    bgYellow: '\x1b[30;43m',
    bgBlue: '\x1b[30;44m',
    bgMagenta: '\x1b[30;45m',
    bgCyan: '\x1b[30;46m',
    bgWhite: '\x1b[30;47m',
    normal: '\x1b[0m'
};
exports.anyToString = (obj) => {
    if (obj === undefined) {
        return `${colors.bgBlue}undefined${colors.normal}`;
    }
    else if (obj === null) {
        return `${colors.bgBlue}null${colors.normal}`;
    }
    else if (typeof obj === 'object') {
        try {
            let name = '';
            if ('constructor' in obj) {
                name = `[${obj.constructor.name}] `;
            }
            else if ('name' in obj) {
                name = `[${obj.name}] `;
            }
            return `${name}${JSON.stringify(obj)}`;
        }
        catch (e) {
            return Object.keys(obj);
        }
    }
    else {
        return obj.toString();
    }
};
const putTerminal = (log, write) => {
    const isVerboseLevel = true;
    let source = '';
    if (isVerboseLevel) {
        let i = 0;
        while (i < log.stack.length) {
            const { fileName, lineNumber, columnNumber } = log.stack[i];
            if (fileName.indexOf(log.root) === 0) {
                const relative = fileName.substr(log.root.length + 1);
                if (relative.indexOf('node_modules/') !== 0) {
                    source = [relative, lineNumber, columnNumber, ' '].join(':');
                    break;
                }
            }
            i++;
        }
    }
    const message = log.args
        .map(obj => exports.anyToString(obj))
        .map(s => s.length > 300 ? `[${s.length}]${s.substr(0, 300)}...` : s)
        .join(' ');
    const at = typeof log.at === 'object' ? log.at.toLocaleTimeString() : log.at;
    const logColors = {
        info: colors.cyan,
        verbose: colors.bgGreen,
        debug: colors.bgYellow,
        warn: colors.cyan,
        error: colors.red
    };
    const startColor = logColors[log.type.split('.')[0]];
    const length = isVerboseLevel ? 7 : 5;
    const logType = `${log.type}      `.substr(0, length);
    const logName = isVerboseLevel ? `\x1b[m${log.name}.` : '';
    write(`${logName}${startColor}${logType}${colors.normal} ${colors.green}[${at}]${colors.normal} ${source}${message}\n`);
};
exports.createTerminalOutputter = (write) => {
    return class extends types_1.LogOutputter {
        _output(log) {
            putTerminal(log, write);
        }
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVybWluYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvb3V0cHV0L3Rlcm1pbmFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsb0NBQTBEO0FBRTFELE1BQU0sTUFBTSxHQUFHO0lBQ2IsR0FBRyxFQUFFLFVBQVU7SUFDZixLQUFLLEVBQUUsVUFBVTtJQUNqQixNQUFNLEVBQUUsVUFBVTtJQUNsQixJQUFJLEVBQUUsVUFBVTtJQUNoQixPQUFPLEVBQUUsVUFBVTtJQUNuQixJQUFJLEVBQUUsVUFBVTtJQUNoQixLQUFLLEVBQUUsVUFBVTtJQUNqQixLQUFLLEVBQUUsYUFBYTtJQUNwQixPQUFPLEVBQUUsYUFBYTtJQUN0QixRQUFRLEVBQUUsYUFBYTtJQUN2QixNQUFNLEVBQUUsYUFBYTtJQUNyQixTQUFTLEVBQUUsYUFBYTtJQUN4QixNQUFNLEVBQUUsYUFBYTtJQUNyQixPQUFPLEVBQUUsYUFBYTtJQUN0QixNQUFNLEVBQUUsU0FBUztDQUNsQixDQUFBO0FBRVksUUFBQSxXQUFXLEdBQUcsQ0FBQyxHQUFRLEVBQUUsRUFBRTtJQUN0QyxJQUFJLEdBQUcsS0FBSyxTQUFTLEVBQUU7UUFDckIsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLFlBQVksTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFBO0tBQ25EO1NBQU0sSUFBSSxHQUFHLEtBQUssSUFBSSxFQUFFO1FBQ3ZCLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxPQUFPLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQTtLQUM5QztTQUFNLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO1FBQ2xDLElBQUk7WUFDRixJQUFJLElBQUksR0FBRyxFQUFFLENBQUE7WUFDYixJQUFJLGFBQWEsSUFBSSxHQUFHLEVBQUU7Z0JBQ3hCLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxJQUFJLENBQUE7YUFDcEM7aUJBQU0sSUFBSSxNQUFNLElBQUks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