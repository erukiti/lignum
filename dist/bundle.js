'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var stacktraceJs = _interopDefault(require('stacktrace-js'));
var ws = _interopDefault(require('ws'));
var fs = _interopDefault(require('fs'));
var path = _interopDefault(require('path'));

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};





function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var putConsole_1 = createCommonjsModule(function (module) {
const putConsole = (log, callback = msg => process.stdout.write(msg)) => {
    const message = log.args.map(obj => {
        if (obj === undefined) {
            return 'undefined'
        } else if (obj === null) {
            return 'null'
        } else if (typeof obj === 'object') {
            return JSON.stringify(obj)
        } else {
            return obj.toString()
        }
    }).join(' ');

    const at = typeof log.at === 'object' ? log.at.toLocaleTimeString() : log.at;

    let startColor = '';
    switch (log.type) {
        case 'info':
            startColor = '\x1b[36m';
            break
        case 'log':
            startColor = '\x1b[32m';
            break
        case 'debug':
            startColor = '\x1b[35m';
            break

        case 'warn':
            startColor = '\x1b[33m';
            break

        case 'error':
            startColor = '\x1b[31m';
            break
    }

    const logType = `${log.type}    `.substr(0, 5);
    // FIXME: log.name

    callback(`${startColor}${logType}\x1b[m \x1b[32m[${at}]\x1b[m ${log.source}${message}\n`);
};

module.exports = putConsole;
});

var putWs = createCommonjsModule(function (module) {
const createPutWs = (url) => {
    let logs = [];
    let putFunc = log => logs.push(log);

    const ws$$1 = new ws(ws$$1, {handshakeTimeout: 2000});
    ws$$1.on('open', () => {
        putFunc = log => commonjsGlobal.ws.send(JSON.stringify(log));
        logs.forEach(log => putFunc(log));
        logs = [];
    });
    ws$$1.on('error', err => {
        console.error(err);
        putFunc = log => console.log(logs);
        logs.forEach(log => putFunc(log));
        logs = [];
    });

    const put = log => {
        putFunc(log);
    };

    return put
};
});

class Log {
    constructor(name, root, type, args, stack) {
        this.name = name;
        this.root = root;
        this.type = type;
        this.at = new Date();
        this.args = args;
        this.stack = stack;

        this.source = '';
        let i = 0;
        while (i < stack.length) {
            const {fileName, lineNumber, columnNumber} = stack[i];
            if (fileName.indexOf(root) === 0) {
                const relative = fileName.substr(root.length + 1);
                if (relative.indexOf('node_modules/') !== 0) {
                    this.source = [relative, lineNumber, columnNumber, ' '].join(':');
                    break
                }
            }
            i++;
        }


    }
}

var log = Log;

const reWsurl = /^ws:\/\/([^:]+):([a-z]+)/;

class Logger {
    constructor(opts) {
        this.name = opts.name;
        this.root = opts.root;
        this.putFunc = [];
        this.isNode = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';

        const url = process.env.LIGNUM_WS || opts.ws;
        if (url) {
            const matched = reWsurl.exec(url);
            if (matched) {
                cosnole.log(matched);
                this.putFunc.push(putWs(url));
            } else {
                console.error('WebSocket URL is wrong');
            }
        }

        if (!this.isNode) {
            this.putFunc.push(log$$1 => {
                console.log(log$$1.name, log$$1.type, log$$1.args);
            });
        } else {
            this._findRoot();
            if (process.env.LIGNUM_FILE) {
                const fs$$1 = fs;
                this.putFunc.push(log$$1 => {
                    putConsole_1(log$$1, msg => {
                        fs$$1.appendFileSync(process.env.LIGNUM_FILE, msg);
                    });
                });
            } else {
                // FIXME: もっと細かく制御
                this.putFunc.push(log$$1 => putConsole_1(log$$1));
            }
        }

        this.setLevel(opts.level || 'info');
    }

    _findRoot() {
        const traces = stacktraceJs.getSync();
        const path$$1 = path;
        const fs$$1 = fs;
        let i = 0;

        while (path$$1.dirname(traces[i].fileName) === __dirname) {
            i++;
        }
        const paths = path$$1.dirname(traces[i].fileName).split('/').filter(s => s !== '');
        // FIXME: global の時にこまりそう
        while (paths.indexOf('node_modules') !== -1) {
            paths.pop();
        }

        while (paths.length > 0) {
            try {
                const fn = path$$1.join('/', ...paths, 'package.json');
                // console.log(fn)
                const {name} = JSON.parse(fs$$1.readFileSync(fn).toString());
                this.name = name;
                this.root = path$$1.dirname(fn);
                // console.log(name, this.root)
                break
            } catch (e) {
                paths.pop();
            }
        }
    }

    setLevel(level) {
        this.level = this._getLogLevel(level);
        this.isVerboseLevel = this.level >= this._getLogLevel('verbose');
    }

    _getLogLevel(level) {
        const result = ['error', 'warn', 'info', 'verbose', 'debug'].indexOf(level);
        if (result === -1) {
            return 2
        } else {
            return result
        }
    }

    put(type, ...args) {
        if (this._getLogLevel(type) > this.level) {
            return
        }

        const log$$1 = new log(this.name, this.root, type, args, stacktraceJs.getSync());
        this.putFunc.forEach(putFunc => putFunc(log$$1));
    }

    info(...args) {
        this.put('info', ...args);
    }

    log(...args) {
        this.put('log', ...args);
    }
    verbose(...args) {
        this.put('log', ...args);
    }
    debug(...args) {
        this.put('debug', ...args);
    }

    error(...args) {
        this.put('error', ...args);
    }

    warn(...args) {
        this.put('warn', ...args);
    }
}

var logger = Logger;

var index = createCommonjsModule(function (module) {
let logger$$1 = null;

const getLogger = (opts = {}) => {
    if (!logger$$1) {
        logger$$1 = new logger(opts);
        logger$$1.verbose('logging start');
    }
    return logger$$1
};

module.exports = {getLogger};
});

var index_1 = index.getLogger;

exports['default'] = index;
exports.getLogger = index_1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
