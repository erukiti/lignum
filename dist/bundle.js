'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var ws = _interopDefault(require('ws'));
var stacktraceJs = _interopDefault(require('stacktrace-js'));
var process$1 = _interopDefault(require('process'));
var path = _interopDefault(require('path'));
var os = _interopDefault(require('os'));
var fs = _interopDefault(require('fs'));

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var putConsole_1 = createCommonjsModule(function (module) {
const isNode = typeof process$1 === 'object' && typeof process$1.versions === 'object' && !!process$1.versions.node;


const putConsole = (log, isVerboseLevel = false) => {
    if (!isNode) {
        console.log(log.name, log.type, log.args);
        return
    }

    let source = '';
    if (isVerboseLevel) {
        let i = 0;
        while (i < log.stack.length) {
            const {fileName, lineNumber, columnNumber} = log.stack[i];
            if (fileName.indexOf(log.root) === 0) {
                const relative = fileName.substr(log.root.length + 1);
                if (relative.indexOf('node_modules/') !== 0) {
                    source = [relative, lineNumber, columnNumber, ' '].join(':');
                    break
                }
            }
            i++;
        }
    }

    const message = log.args.map(obj => {
        if (obj === undefined) {
            return 'undefined'
        } else if (obj === null) {
            return 'null'
        } else if (typeof obj === 'object') {
            return JSON.stringify(obj)
        } else {
            return obj.toString()
        }
    }).join(' ');

    const at = typeof log.at === 'object' ? log.at.toLocaleTimeString() : log.at;

    let startColor = '';
    switch (log.type) {
        case 'info':
            startColor = '\x1b[36m';
            break
        case 'verbose':
            startColor = '\x1b[32m';
            break
        case 'debug':
            startColor = '\x1b[35m';
            break

        case 'warn':
            startColor = '\x1b[33m';
            break

        case 'error':
            startColor = '\x1b[31m';
            break
    }

    const length = isVerboseLevel ? 7 : 5;
     
    const logType = `${log.type}      `.substr(0, length);
    const logName = isVerboseLevel ? `\x1b[m${log.name}.` : '';

    process$1.stdout.write(`${logName}${startColor}${logType}\x1b[m \x1b[32m[${at}]\x1b[m ${source}${message}\n`);
};

module.exports = putConsole;
});

const isNode = typeof process === 'object' && typeof process.versions === 'object' && !!process.versions.node;

class Logger {
    constructor(opts) {
        this.name = opts.name;
        this.root = opts.root;

        const traces = stacktraceJs.getSync();
        if (isNode) {
            const path$$1 = path;
            const fs$$1 = fs;
            let i = 0;
            while (path$$1.dirname(traces[i].fileName) === __dirname) {
                i++;
            }
            const callerPath = path$$1.dirname(traces[i].fileName).split('/').filter(s => s !== '');
            while (callerPath.length > 0) {
                try {
                    const fn = path$$1.join('/', ...callerPath, 'package.json');
                    const {name} = JSON.parse(fs$$1.readFileSync(fn));
                    this.name = name;
                    this.root = path$$1.dirname(fn);
                    break
                } catch (e) {
                    callerPath.pop();
                }
            }
        }
        this.setLevel(opts.level || 'info');
        this.isVerboseLevel = this.level >= this._getLogLevel('verbose');

        this.logs = [];
        this.isDisabled = opts.isDisabled;
        this.isWsOpened = false;
        this.state = 'init';

        this.isNode = typeof process === 'object';

        const flush = callback => {
            this.logs.forEach(callback);
            this.logs = [];
        };

        const flushConsole = () => {
            this.state = 'standalone';
            this.ws = null;
            flush(log => putConsole_1(log, this.isVerboseLevel));
        };

        if (!this.isDisabled) {
            try {
                this.ws = new ws('ws://localhost:9999/');
                this.ws.on('open', () => {
                    this.state = 'opened';
                    flush(log => this.ws.send(JSON.stringify(log)));
                });
                this.ws.on('error', () => {
                    flushConsole();
                });
            } catch (e) {
                flushConsole();
            }
        }
    }

    setLevel(level) {
        this.level = this._getLogLevel(level);
        this.isVerboseLevel = this.level >= this._getLogLevel('verbose');
    }

    _getLogLevel(level) {
        const result = ['error', 'warn', 'info', 'verbose', 'debug'].indexOf(level);
        if (result === -1) {
            return 2
        } else {
            return result
        }
    }

    _putLog(type, args) {
        if (this._getLogLevel(type) > this.level) {
            return
        }

        const log = {name: this.name, at: new Date(), root: this.root, type, args, stack: stacktraceJs.getSync()};
        switch (this.state) {
            case 'standalone': {
                putConsole_1(log, this.isVerboseLevel);
                break
            }
            case 'opened': {
                this.ws.send(JSON.stringify(log));
                break
            }
            case 'init': {
                this.logs.push(log);
                break
            }
        }
    }

    info(...args) {
        this._putLog('info', args);
    }

    log(...args) {
        this._putLog('verbose', args);
    }
    verbose(...args) {
        this._putLog('verbose', args);
    }
    debug(...args) {
        this._putLog('debug', args);
    }

    error(...args) {
        this._putLog('error', args);
    }

    warn(...args) {
        this._putLog('warn', args);
    }
}

var logger = Logger;

var index = createCommonjsModule(function (module) {
let logger$$1 = null;

const getLogger = (opts = {}) => {
    if (!logger$$1) {
        logger$$1 = new logger(opts);
        logger$$1.verbose('logging start');
    }
    return logger$$1
};

module.exports = {getLogger};
});

var index_1 = index.getLogger;

exports['default'] = index;
exports.getLogger = index_1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
